<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.zucc.web.dao.IAccountCheckMapper" >
  <resultMap id="BaseResultMap" type="org.zucc.web.entity.IAccountCheck" >
    <id column="account_check_id" property="accountCheckId" jdbcType="BIGINT" />
    <result column="account_check_accountId" property="accountCheckAccountid" jdbcType="BIGINT" />
    <result column="account_check_money" property="accountCheckMoney" jdbcType="DOUBLE" />
    <result column="account_check_state" property="accountCheckState" jdbcType="BIT" />
    <result column="account_check_time" property="accountCheckTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    account_check_id, account_check_accountId, account_check_money, account_check_state, 
    account_check_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="org.zucc.web.entity.IAccountCheckExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from i_account_check
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart>=0" >
      limit #{limitStart} , #{limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from i_account_check
    where account_check_id = #{accountCheckId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from i_account_check
    where account_check_id = #{accountCheckId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="org.zucc.web.entity.IAccountCheckExample" >
    delete from i_account_check
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.zucc.web.entity.IAccountCheck" >
    insert into i_account_check (account_check_id, account_check_accountId, 
      account_check_money, account_check_state, account_check_time
      )
    values (#{accountCheckId,jdbcType=BIGINT}, #{accountCheckAccountid,jdbcType=BIGINT}, 
      #{accountCheckMoney,jdbcType=DOUBLE}, #{accountCheckState,jdbcType=BIT}, #{accountCheckTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="org.zucc.web.entity.IAccountCheck" >
    insert into i_account_check
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="accountCheckId != null" >
        account_check_id,
      </if>
      <if test="accountCheckAccountid != null" >
        account_check_accountId,
      </if>
      <if test="accountCheckMoney != null" >
        account_check_money,
      </if>
      <if test="accountCheckState != null" >
        account_check_state,
      </if>
      <if test="accountCheckTime != null" >
        account_check_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="accountCheckId != null" >
        #{accountCheckId,jdbcType=BIGINT},
      </if>
      <if test="accountCheckAccountid != null" >
        #{accountCheckAccountid,jdbcType=BIGINT},
      </if>
      <if test="accountCheckMoney != null" >
        #{accountCheckMoney,jdbcType=DOUBLE},
      </if>
      <if test="accountCheckState != null" >
        #{accountCheckState,jdbcType=BIT},
      </if>
      <if test="accountCheckTime != null" >
        #{accountCheckTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.zucc.web.entity.IAccountCheckExample" resultType="java.lang.Integer" >
    select count(*) from i_account_check
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update i_account_check
    <set >
      <if test="record.accountCheckId != null" >
        account_check_id = #{record.accountCheckId,jdbcType=BIGINT},
      </if>
      <if test="record.accountCheckAccountid != null" >
        account_check_accountId = #{record.accountCheckAccountid,jdbcType=BIGINT},
      </if>
      <if test="record.accountCheckMoney != null" >
        account_check_money = #{record.accountCheckMoney,jdbcType=DOUBLE},
      </if>
      <if test="record.accountCheckState != null" >
        account_check_state = #{record.accountCheckState,jdbcType=BIT},
      </if>
      <if test="record.accountCheckTime != null" >
        account_check_time = #{record.accountCheckTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update i_account_check
    set account_check_id = #{record.accountCheckId,jdbcType=BIGINT},
      account_check_accountId = #{record.accountCheckAccountid,jdbcType=BIGINT},
      account_check_money = #{record.accountCheckMoney,jdbcType=DOUBLE},
      account_check_state = #{record.accountCheckState,jdbcType=BIT},
      account_check_time = #{record.accountCheckTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.zucc.web.entity.IAccountCheck" >
    update i_account_check
    <set >
      <if test="accountCheckAccountid != null" >
        account_check_accountId = #{accountCheckAccountid,jdbcType=BIGINT},
      </if>
      <if test="accountCheckMoney != null" >
        account_check_money = #{accountCheckMoney,jdbcType=DOUBLE},
      </if>
      <if test="accountCheckState != null" >
        account_check_state = #{accountCheckState,jdbcType=BIT},
      </if>
      <if test="accountCheckTime != null" >
        account_check_time = #{accountCheckTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where account_check_id = #{accountCheckId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.zucc.web.entity.IAccountCheck" >
    update i_account_check
    set account_check_accountId = #{accountCheckAccountid,jdbcType=BIGINT},
      account_check_money = #{accountCheckMoney,jdbcType=DOUBLE},
      account_check_state = #{accountCheckState,jdbcType=BIT},
      account_check_time = #{accountCheckTime,jdbcType=TIMESTAMP}
    where account_check_id = #{accountCheckId,jdbcType=BIGINT}
  </update>
</mapper>