<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.zucc.web.dao.IEnrollMapper" >
  <resultMap id="BaseResultMap" type="org.zucc.web.entity.IEnroll" >
    <id column="enroll_id" property="enrollId" jdbcType="BIGINT" />
    <result column="enroll_courseId" property="enrollCourseid" jdbcType="BIGINT" />
    <result column="enroll_userId" property="enrollUserid" jdbcType="BIGINT" />
    <result column="enroll_question" property="enrollQuestion" jdbcType="VARCHAR" />
    <result column="enroll_phone" property="enrollPhone" jdbcType="VARCHAR" />
    <result column="enroll_name" property="enrollName" jdbcType="VARCHAR" />
    <result column="enroll_company" property="enrollCompany" jdbcType="VARCHAR" />
    <result column="enroll_position" property="enrollPosition" jdbcType="VARCHAR" />
    <result column="enroll_email" property="enrollEmail" jdbcType="VARCHAR" />
    <result column="enroll_money" property="enrollMoney" jdbcType="DOUBLE" />
    <result column="enroll_pay_state" property="enrollPayState" jdbcType="BIT" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    enroll_id, enroll_courseId, enroll_userId, enroll_question, enroll_phone, enroll_name, 
    enroll_company, enroll_position, enroll_email, enroll_money, enroll_pay_state
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="org.zucc.web.entity.IEnrollExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from i_enroll
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart>=0" >
      limit #{limitStart} , #{limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from i_enroll
    where enroll_id = #{enrollId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from i_enroll
    where enroll_id = #{enrollId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="org.zucc.web.entity.IEnrollExample" >
    delete from i_enroll
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.zucc.web.entity.IEnroll" >
    insert into i_enroll (enroll_id, enroll_courseId, enroll_userId, 
      enroll_question, enroll_phone, enroll_name, 
      enroll_company, enroll_position, enroll_email, 
      enroll_money, enroll_pay_state)
    values (#{enrollId,jdbcType=BIGINT}, #{enrollCourseid,jdbcType=BIGINT}, #{enrollUserid,jdbcType=BIGINT}, 
      #{enrollQuestion,jdbcType=VARCHAR}, #{enrollPhone,jdbcType=VARCHAR}, #{enrollName,jdbcType=VARCHAR}, 
      #{enrollCompany,jdbcType=VARCHAR}, #{enrollPosition,jdbcType=VARCHAR}, #{enrollEmail,jdbcType=VARCHAR}, 
      #{enrollMoney,jdbcType=DOUBLE}, #{enrollPayState,jdbcType=BIT})
  </insert>
  <insert id="insertSelective" parameterType="org.zucc.web.entity.IEnroll" >
    insert into i_enroll
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="enrollId != null" >
        enroll_id,
      </if>
      <if test="enrollCourseid != null" >
        enroll_courseId,
      </if>
      <if test="enrollUserid != null" >
        enroll_userId,
      </if>
      <if test="enrollQuestion != null" >
        enroll_question,
      </if>
      <if test="enrollPhone != null" >
        enroll_phone,
      </if>
      <if test="enrollName != null" >
        enroll_name,
      </if>
      <if test="enrollCompany != null" >
        enroll_company,
      </if>
      <if test="enrollPosition != null" >
        enroll_position,
      </if>
      <if test="enrollEmail != null" >
        enroll_email,
      </if>
      <if test="enrollMoney != null" >
        enroll_money,
      </if>
      <if test="enrollPayState != null" >
        enroll_pay_state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="enrollId != null" >
        #{enrollId,jdbcType=BIGINT},
      </if>
      <if test="enrollCourseid != null" >
        #{enrollCourseid,jdbcType=BIGINT},
      </if>
      <if test="enrollUserid != null" >
        #{enrollUserid,jdbcType=BIGINT},
      </if>
      <if test="enrollQuestion != null" >
        #{enrollQuestion,jdbcType=VARCHAR},
      </if>
      <if test="enrollPhone != null" >
        #{enrollPhone,jdbcType=VARCHAR},
      </if>
      <if test="enrollName != null" >
        #{enrollName,jdbcType=VARCHAR},
      </if>
      <if test="enrollCompany != null" >
        #{enrollCompany,jdbcType=VARCHAR},
      </if>
      <if test="enrollPosition != null" >
        #{enrollPosition,jdbcType=VARCHAR},
      </if>
      <if test="enrollEmail != null" >
        #{enrollEmail,jdbcType=VARCHAR},
      </if>
      <if test="enrollMoney != null" >
        #{enrollMoney,jdbcType=DOUBLE},
      </if>
      <if test="enrollPayState != null" >
        #{enrollPayState,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.zucc.web.entity.IEnrollExample" resultType="java.lang.Integer" >
    select count(*) from i_enroll
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update i_enroll
    <set >
      <if test="record.enrollId != null" >
        enroll_id = #{record.enrollId,jdbcType=BIGINT},
      </if>
      <if test="record.enrollCourseid != null" >
        enroll_courseId = #{record.enrollCourseid,jdbcType=BIGINT},
      </if>
      <if test="record.enrollUserid != null" >
        enroll_userId = #{record.enrollUserid,jdbcType=BIGINT},
      </if>
      <if test="record.enrollQuestion != null" >
        enroll_question = #{record.enrollQuestion,jdbcType=VARCHAR},
      </if>
      <if test="record.enrollPhone != null" >
        enroll_phone = #{record.enrollPhone,jdbcType=VARCHAR},
      </if>
      <if test="record.enrollName != null" >
        enroll_name = #{record.enrollName,jdbcType=VARCHAR},
      </if>
      <if test="record.enrollCompany != null" >
        enroll_company = #{record.enrollCompany,jdbcType=VARCHAR},
      </if>
      <if test="record.enrollPosition != null" >
        enroll_position = #{record.enrollPosition,jdbcType=VARCHAR},
      </if>
      <if test="record.enrollEmail != null" >
        enroll_email = #{record.enrollEmail,jdbcType=VARCHAR},
      </if>
      <if test="record.enrollMoney != null" >
        enroll_money = #{record.enrollMoney,jdbcType=DOUBLE},
      </if>
      <if test="record.enrollPayState != null" >
        enroll_pay_state = #{record.enrollPayState,jdbcType=BIT},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update i_enroll
    set enroll_id = #{record.enrollId,jdbcType=BIGINT},
      enroll_courseId = #{record.enrollCourseid,jdbcType=BIGINT},
      enroll_userId = #{record.enrollUserid,jdbcType=BIGINT},
      enroll_question = #{record.enrollQuestion,jdbcType=VARCHAR},
      enroll_phone = #{record.enrollPhone,jdbcType=VARCHAR},
      enroll_name = #{record.enrollName,jdbcType=VARCHAR},
      enroll_company = #{record.enrollCompany,jdbcType=VARCHAR},
      enroll_position = #{record.enrollPosition,jdbcType=VARCHAR},
      enroll_email = #{record.enrollEmail,jdbcType=VARCHAR},
      enroll_money = #{record.enrollMoney,jdbcType=DOUBLE},
      enroll_pay_state = #{record.enrollPayState,jdbcType=BIT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.zucc.web.entity.IEnroll" >
    update i_enroll
    <set >
      <if test="enrollCourseid != null" >
        enroll_courseId = #{enrollCourseid,jdbcType=BIGINT},
      </if>
      <if test="enrollUserid != null" >
        enroll_userId = #{enrollUserid,jdbcType=BIGINT},
      </if>
      <if test="enrollQuestion != null" >
        enroll_question = #{enrollQuestion,jdbcType=VARCHAR},
      </if>
      <if test="enrollPhone != null" >
        enroll_phone = #{enrollPhone,jdbcType=VARCHAR},
      </if>
      <if test="enrollName != null" >
        enroll_name = #{enrollName,jdbcType=VARCHAR},
      </if>
      <if test="enrollCompany != null" >
        enroll_company = #{enrollCompany,jdbcType=VARCHAR},
      </if>
      <if test="enrollPosition != null" >
        enroll_position = #{enrollPosition,jdbcType=VARCHAR},
      </if>
      <if test="enrollEmail != null" >
        enroll_email = #{enrollEmail,jdbcType=VARCHAR},
      </if>
      <if test="enrollMoney != null" >
        enroll_money = #{enrollMoney,jdbcType=DOUBLE},
      </if>
      <if test="enrollPayState != null" >
        enroll_pay_state = #{enrollPayState,jdbcType=BIT},
      </if>
    </set>
    where enroll_id = #{enrollId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.zucc.web.entity.IEnroll" >
    update i_enroll
    set enroll_courseId = #{enrollCourseid,jdbcType=BIGINT},
      enroll_userId = #{enrollUserid,jdbcType=BIGINT},
      enroll_question = #{enrollQuestion,jdbcType=VARCHAR},
      enroll_phone = #{enrollPhone,jdbcType=VARCHAR},
      enroll_name = #{enrollName,jdbcType=VARCHAR},
      enroll_company = #{enrollCompany,jdbcType=VARCHAR},
      enroll_position = #{enrollPosition,jdbcType=VARCHAR},
      enroll_email = #{enrollEmail,jdbcType=VARCHAR},
      enroll_money = #{enrollMoney,jdbcType=DOUBLE},
      enroll_pay_state = #{enrollPayState,jdbcType=BIT}
    where enroll_id = #{enrollId,jdbcType=BIGINT}
  </update>
</mapper>